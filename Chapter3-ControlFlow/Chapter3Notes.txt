C Programming Language 
11/28/2013, Emily Wang
Notes on Chapter 2 - Control Flow

***3.1 Statements and Blocks

semicolons are the statement terminator
examples
x = 0;
i++;
printf(...);

braces {} will group declarations and statements together in 
a compound statement 
(ex. the {} for an if statement chunk of code)
no semicolon after the } that ends a block


***3.2 If-Else

if (expression)
    statement1
else
    statement2

the else part is optional
the expression is evaluated
if expr is true (non zero value), statement1 is executed
if expr is false (zero), and there is an else, statement2 is executed
if expr is false and there isn't an else, nothing happens and 
then we move on to the rest of the code

some shortcuts:
if expression   is the same as   if (expression!=0)

//just try your best to be clear with your code

when you have nested if-else statements, it's ambiguous when
you remove the else... *potential bugs waiting to happen*
one way to resolve this issue is associated the else
with the most recently closed else-less if

so, use curlybraces!


***3.3 Else-If

if (expression)
    statement
else if (expression)
    statement
else if (expression)
    statement
else if (expression)
    statement
else
    statement

"A multi-way decision"
The expressions are evaluted in order
If an expression is true, the corresponding statement is executed, and then
this terminates the entire if-statement chain.

The code for each statement is a single statement or a
group in braces

Again, the else is optional - but it's good for catching
errors (the conceptually "impossible" condition 
might actually occur in real-life b/c of subtle bugs)

remember, else doesn't have an expression, but else if does b/c it's
specific...


***3.4 Switch

"A multi-way decision that tests whether an expression matches 
one of a number of constant integer values, and
branches accordingly"

switch (expression) {
    case const-expr: statements
    case const-expr: statements
    default: statements
}

all case expressions must be different
the default case is optional (if it's not there and none of the cases match, then nothing happens) and executed if no other cases are satisfied 
    -good practice: put a break at the end of the last case
cases and default clause can occur in any order

break causes and immediate exit from switch
cases are just labels : after the code for one case is done, then the execution
falls through tot he next unless you take explicity action to escape
break and return are common ways to leave a switch

you can have several cases be attached to a single action

for switch vs. if dilemma: switches are more efficient b/c 
the machine creates a hash table for the different cases?


***3.5 Loops - While and For

while (expression)
    statement

the expression is evaluated
if non zero, statement is executed
expression is re-evaluated
the cycle continues until expression becomes zero
and then execution resumes after the statement


for (expr1; expr2; expr3)
    statement

is equivalent to (but for loops are more efficient b/c you don't
have to check the expression every single time... how does
this mechanism in C work on a lower level??)

expr1;
while (expr2) {
    statement
    expr3;
}

except for the continue keyword (see 3.7)

usually,
expr1 and expr3 are assignments or function calls
expr2 is a relational expression

any of the three parts can be omitted, but you must keep the semicolons
if expr1 or expr3 is taken out, then it's just dropped from the expansion
HOWEVER omitting expr will produce an infinite loop....

While vs For?

depends on the situation / personal preference!

while ((c = getchar()) == ' ' || c == '\n' || c = '\t')
    ;/* skip white space characters */
//there's no initialization or re-initialization, so a while loop
//is the natural choice.
 
for (i =0; i < n; i++)
    ...//processing the first n elements of an array
//i retains its value after the for loop is done
// there's a simple initialization and increment, keeps the loop control
// statements close together and at the top of the loop

you can put any expression you'd like in the progression things in a for loop
however don't force a lot of unrelated computation into the intialization
and increment of for loops... because that's what the chunk of code inside 
the for loop is for... the init/increment things should just be for loop 
control operations

, The comma operator! 
evaluated left to right
type/value of the result are the type/value of the RHS operand

most often used in the for statement
ex. you can do two indices in parallel

see reverse.c

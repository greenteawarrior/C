C Programming Language 
11/25-28/2013, Emily Wang
Notes on Chapter 2 - Types, Operators, and Expressions
Variables, Constants, Declarations, Operators


***2.1 Variable Names
Names are made of variables and digits
First character must be a letter (underscore counts)
However, don't start your variables with underscore - usually libraries do this
Case sensitive
Typical convention: lowercase for variable names, uppercase for symbolic constants

Cannot use keywords (if, else, int, float, etc)

Short names for local variables
Longer names for external veriables


***2.2 Data Types and Sizes
char
    signed (ex. 2's complement)
    unsigned

int
    short
    long

    signed 
    unsigned

float

double
    long double


***2.3 Constants
~integer things
int 1234
long 123456789l (with the terminal l or L)
unsigned consant 1234u (terminal u or U)
unsigned long 1234ul(suffix ul or UL)

~float things
floating point double 123.4 (with a decimal point)
floating point double 1e-2 (exponent)
float constant with f or F sufffix

~integers can be in octal or hex instead of decimal too
decimal: 31
octal (leading zero) 037
hexadecimal (leading 0x or 0X) 0x1f or 0x1F
    these octal/hexademical constants can also be suffixed by L (makes them long) or U (makes them unsigned)
unsigned long constant 0XFUL (d15 value)

~characters
an integer, written as one character within single quotes
'x'
value of character constant is th enumeric value of the char in the machine's char set

example: '0' in ASCII character set has the value 48
irrelevant to the numeric value zero

sometimes there are escape things
we promise that these are still only one character
ex. '\n'
arbitrary byte-sized bit pattern '\ooo' is one or three octal digits (0...7)

!!complete list of escaped things
\a alert (bell) character 
\\ backslash
\b backspace 
\? question mark
\f formfeed 
\' single quote
\n newline 
\" double quote
\r carriage return 
\ooo octal number
\t horizontal tab 
\xhh hexadecimal number
\v vertical tab

'\0' is the null character, represents the character w/ value zero

~constant expressions
evaluated at compilation rather than run-time
can be used any place a constant can be used
ex.
#define MAXLINE 1000
char line[MAXLINE+1]

~string constant aka string literal
sequence of zero or more characters surrounded by double quotes
ex. "I am a string"
ex. "" //the empty string
Quotes just delimit the string (aren't actually a part of it)
Same escape rules
Can be concatenated at compile time
ex. "hello, " "world" is the same as "hello, world"
can be used to split up long strings across several source lines

it's an array of characters with '\0' at the end

BEWARE: THESE ARE NOT THE SAME:
'x' an integer, produces the numeric value of the letter x in the machine's char set
"x" is an array of characters with one character (the letter x) and the null '\0'

~enumeration constant
a list of constant integer values

example: enum boolean {NO, YES};

by default, the first name in an enum has value 0, then 1, ... n
unless explicit values are specified

example: when it's completely specified:
enum escapes { BELL = '\a', BACKSPACE = '\b', TAB = '\t',
               NEWLINE = '\n', VTAB = '\v', RETURN = '\r' };


if not all values are specified, unspecified values continue the progression from the last specified values

example:
enum months { JAN = 1, FEB, MAR, APR, MAY, JUN,
              JUL, AUG, SEP, OCT, NOV, DEC };
              /* FEB = 2, MAR = 3, etc. */


enumerations vs symbolic constants w/ #define : 
enumerations are more convenient b/c the values will be generated for you??
some other info here:
http://stackoverflow.com/questions/3699760/compare-symbolic-constant-enumeration-constant-variable


***2.4 Declarations
int lower, uppper, step;
char c, line[1000];

same as
int lower;
int upper;
int step;
char ;
char line[1000];

^this style takes more space but gives you room to comment each line

variables can also be initialized when declared
char esc = '\\';
int i=0;
int limit=MAXLINE+1;
float eps=1.0e-5;

if the var isn't automatic, the initialization is done only once
(conceptuionally before the program starts to execute)

an explicitly initialized automatic variable is initialized evry time the related function or block is entered
external and static variables are initialized to zero by default
automatic variables w/o an explicit initializer have undefined/garbage values

const can be applied to any variable declaration to specify that it won't be changed
ex. const double e=2.71828;
ex. const char msg[] = "warning: ";

const can also be used with array arguments, to indicate the function doesn't change the array
int strlen(const char[]);


***2.5 Arithmetic Operators

+
-
*
/
%

integer division truncates any fractional part
% cannot be used with a float or double
+ and - have the same precedence
* and / and % have higher precendence than +-
arithmetic operators associate left to right


***2.6 Relational and Logical Operators

relational operators have the same precedence:
>
>=
<
<=
relational operators have lower precedence than arithmetic operators
ex. i < lim-1 is the same as i < (lim-1)

equality operators have lower precedence than the relational ones:
==
!=

logical operators
&&
||
evaluated left to right
evaluation stops as soon as the truth or falsehood of the result is known

be smart about the order of your tests...
book excerpt:

for (i=0; i < lim-1 && (c=getchar()) != '\n' && c != EOF; ++i)
    s[i] = c;

Before reading a new character it is necessary to check that there is room to store it in the array s, so the
test i < lim-1 must be made first. Moreover, if this test fails, we must not go on and read another
character.
Similarly, it would be unfortunate if c were tested against EOF before getchar is called; therefore the
call and assignment must occur before the character in c is tested.

end book excerpt. 

&& is higher than ||
both are lower than relatioal and equality operators
!= is higher precedence than assigment
use parens to be clear!!

logical 1 = true, zero=false
! is a negation operator
if (!valid) is the same as if(valid==0)


***2.7 Type Conversions

see the atoi.c and lowercase.c scripts
//varies on machine architecture: are char variables signed or unsigned integers?? (sometimes sign extension happens, sometimes it doesn't)
//for best portability, specify signed or unsigned if there's non-character data in char variables

in the test part of i, while, for, etc... "true" just means non-zero. 
&& and || will return either 1 or 0
the library functions (ex. isdigit) will return either non-zero value or zero

rules for arithmetic things:
book excerpt:
*If there are no unsigned operands, however, the following
informal set of rules will suffice:
*If either operand is long double, convert the other to long double.
*Otherwise, if either operand is double, convert the other to double.
*Otherwise, if either operand is float, convert the other to float.
*Otherwise, convert char and short to int.
*Then, if either operand is long, convert the other to long.
end book excerpt.

conversions get complicated when you hav eunsigned operands...

conversions take place across assignments; the value of the RHS is converted to the LHS type, which is the type of the result

longer integers are converted to shorter ones or to chars by dropping excess high-order bits

float to int: truncates fractional parts
double to float: depends on the machine; it'll either be rounded or truncated

type conversion also happens when arguments are passed to functions

typecasting! 
(type name) expression

example: sqrt function in <math.h> requires a double argument
sqrt((double)n)

typecasting produces the value of of n in the proper type; n itself is not altered

if arguments are declared by function prototype (i.e. they should be), the declaration causes automatic coercion of any arguments when the func is called

so... for sqrt, this should be in the script:
double sqrt(double)

so the call 
root2 = sqrt(2)

converts the integer2 into the double 2.0 automatically w/o a need for a cast within the call line

see PseudoRandomNumber.c for a typecasting example
see htoi.c (exercise 2-3)

***2.8 Increment and Decrement Operators
++ and -- can be used as either prefix or suffix. interesting!

according to
http://ggia-programming-notes.blogspot.com/2007/11/c-difference-between-prefix-and-suffix.html

prefix: the variable is first incremented and later assigned
i1 = 10;
i2 = ++ i1;

is the same as
i1 = 10;
i1 = i1 + 1;
i2 = i1; //both i1 and i2 will be 11!
think increment, and then assignment

suffix:
i1 = 10;
i2 = i1 ++;

is the same as

i1 = 10;
i2 = i1;
i1 = i1 + 1; //the value of i1 will be 11, the value of i2 will be 10!
think assignment, and then increment

/end link info.

++ and -- can only work with variables
e.g., (i+j)++ is illegal


when you don't care about the value (and only care about incrementing something), 
ex. 
if (c == '\n')
  nl++;
then either prefix or suffix ++ will work

see the squeeze.c script for the subtle prefix vs suffix concept in use!

***2.9 Bitwise Operators
can only work with integral operands (char, short, int, long) , signed or unsigned


&  bitwise AND
|  bitwise inclusive OR
^  bitwise exclusive OR
<< left shift
>> right shift
~  one's complement (unary)

*the bitwise AND & can mask off some set of bits

ex. n = n & 0177;
0177 is in octal
in binary, 0177 = 0000000001111111
this means everything in N except for the last 7 bits are "masked" (b/c AND gates)

*the bitwise OR operator | can turn bits on

*the bitwise exclusive or (XOR) ^ operator sets 1 where the operands have different bits, and zero where they're the same

do not confuse bitwise & and | for && and ||!

shift operators << and >> perform left and right shifts of their LHS operand by the number of bit positions given by the RHS operand (must be non-negative), which must be non-negative

x << 2 shifts the value of x by two positions, filling vacated bits with zeros
this is the same as multiplication by 4

right shifting an unsigned quantity always fits the vacated bits with zero
right shifting a signed quantity will fill with bit signs (arithmetic shift) on some machines and with 0 bits (logical shift) on others

unary operator ~ is the one's complement (i.e. NOT gate)
~077 is a portable form; it's a constant expression that can be evaluated at compile time and is independent of word length

see the exercises for some fun tripy bitwise things
setbits.c
invert.c
rightrot.c

***2.10 Assignment Operators and Expressions
i = i + 2 is equivalent to i +=2

Corresponding assignment operators exist for most binary operators (think + - * / % << >> & ^ |)

To generalize, if expr1 and expr2 are expressions,
then expr1 op= expr2 
is equivalent to
expr1 = (expr1) op (expr2)
and expr1 is computed only once.

Be careful about order of operators
Example: x *= y + 1 is x = x * (y+1) 
                NOT x = x* y + 1

assignment operators are more user friendly :D

assignment statement can happen in expressions
example from a while ago: while ((c = getchar()) != EOF)

you can also do += and -= and etc in expressions (although this is less commonly seen)

the type of an assignment expression is the type of its left operand, and the value is the value after the assignment

2-9 this is because you're always adding one (b/c x-1 + 1 = x) to the LSB when you take the two's complement, and thus you'll always be ANDing 0 & 1 when doing x &= (x-1). 

//bitcount: count 1 bits in x- faster version
int bitcount(unsigned x)
{
  int b;
  for (b = 0; x != 0; x &= x-1)
    ++b;
  return b;
}

//bitcount: the first version (slower)
int bitcount(unsigned x)
{
  int b;

  for (b = 0; x != 0; x >>= 1)
    if (x & 01)
      b++;
    return b;
}

***2.11 Conditional Expressions

woot woot ternary operator "?:"

the CONDITIONAL EXPRESSION
expr1 ? expr2 : expr3

how does this work? well, glad you asked!
~expr1 is evaluated first

~if expr1 is non-zero (true), then expr2 is evaluated, and that's the value of the conditional express.

~if expr2 is false, then expr3 is evaluated, and
that's the value of the conditional express.

example with finding the max of two numbers a and b

if (a > b)
  z = a;
else
  z = b;

is the same as
z = (a > b) ?a : b; //z = max(a,b)

conditional expressions can be used wherever any other expression can be

if expr2 and expr3 are of different types, then the conversion rules apply

example, if f is a float and n and int:

(n > 0) f : n
is of type float regardless of wether n is positive or not

parens are not necessary around the first expression b/c ?: precedence is very low (just above assignment)
but the parens are helpful for readability!!

wow. conditional expressions make code very compact.
this loop prints n elements of an array, 10 per line, with each column separated by one plank, and with each line terminated by a newline.

for (i = 0; i < n; i++)
  printf("%6d%c", a[i], (i&10==9 || i==n-1) ? '\n' : ' ');

definitely more compact than the equivalent if-else statement

another cool example:
printf("You have %d item%s.\n", n, n==1 ? "":"s");

***2.12 Precedence and Order of Evaluation
spiffy table 2.1!

it's listed in descending precedence
btw () is function call
unary & + - and * have higher precedence than the binary forms


Operators                     Associativity
() [] -> .                    //left to right
! ~ ++ -- + - * (type)sizeof  //right to left
* / %                         //left to right
+ -                           //left to right
<< >>                         //left to right
< <= > >=                     //left to right
== !=                         //left to right
&                             //left to right
^                             //left to right 
|                             //left to right  
&&                            //left to right  
||                            //left to right
?:                            //right to left
= += -= *= /= %= &= ^= |= <<= >>= //right to left
,                             //left to right


what. apparently * is indirection through a pointer
and & is address of an object

-PARENTHESES ARE YOUR FRIEND
example: if ((x & MASK) == 0) ...

-C does not specify the order in which operands of an operator are evaluated (exceptions: &&, ||, ?:, ,)

-order in which function arguments are evaluated is not specified

-you can use intermediate steps to be safe

-be careful for "side effects" from function calls, nested assignment statements, increment and decrement operators...

this statement is unhappy: a[i] = i++;
is the subscript the old value or i or the new one??
compilers can interpret this in different ways...based on machine architecture

-moral: writing code that depends on order of evaluation is a bad programming practice in any language
-it's necessary to know what things to avoid, but if you don't know how they're done (i.e. comparch), you won't be able to take advantage of a machine's behavior, so stay safe!

/end chapter 2 for now. WOOT!
